cmake_minimum_required(VERSION 3.6)
project(MyProject)

# tl;dr
# mkdir build; cd build; rm CMakeCache.txt CMakeFiles Makefile -r; cmake .. -DCMAKE_BUILD_TYPE=Debug && make && ctest -T && make codechecker


###############################################
##               Build Options               ##
###############################################
# cmake .. -DCMAKE_BUILD_TYPE=Debug
# cmake .. -DCMAKE_BUILD_TYPE=Release

set(C_STD gnu11)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("Debug build")
    set(C_FLAGS_DEBUG    " -g -Og -fasynchronous-unwind-tables -fexceptions ")
    set(C_FLAGS_WARNINGS " -Wall -Wextra -pedantic -Werror -Wformat=2 -Wconversion -Wdouble-promotion -Wshadow -Wundef ")
ELSE()
    message("Release build")
    set(C_FLAGS_DEBUG    " -O3 ")
    set(C_FLAGS_SECURITY_EXEC " -fpie -Wl,-pie ")
    set(C_FLAGS_SECURITY " -D_FORTIFY_SOURCE=2  -D_GLIBCXX_ASSERTIONS -fcf-protection=full -fstack-protector-strong -fstack-clash-protection \
                           -Wl,-z,noexecstack -Wl,-z,now -Wl,-z,relro -Wl,-z,defs ${C_FLAGS_SECURITY_EXEC} ")
ENDIF()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=${C_STD} ${C_FLAGS_DEBUG} ${C_FLAGS_WARNINGS} ${C_FLAGS_SECURITY} -fno-common")
set(CMAKE_C_COMPILER /usr/bin/gcc)

add_executable(my_program code.c)
include_directories(include/)

###############################################
##         Dynamic Analysis (memcheck)       ##
###############################################
# Run with: ctest -T memcheck

set(MEMORYCHECK_COMMAND_OPTIONS "--error-exitcode=1") #fail on mem. fault
include(CTest)
add_test(my_program my_program)

###############################################
##              Static Analysis              ##
###############################################
# Run with: make codechecker

add_custom_target(
    codechecker_build
    make clean
    COMMAND CodeChecker log --build "make" ;
    --output "./compile_commands.json" ;
)
add_custom_target(
    codechecker_analyze
    DEPENDS codechecker_build
    COMMAND CodeChecker analyze "compile_commands.json" -o reports;
    --enable extreme;
    --clean;
    #--ignore "../.SKIPFILE";
    --ctu;
    --stats;

    #Disable certain style warnings
    -d google-readability-braces-around-statements;
    -d google-readability-todo;
    -d cppcoreguidelines-avoid-magic-numbers;
    -d cppcoreguidelines-init-variables;
)
add_custom_target(
    codechecker
    DEPENDS codechecker_analyze
    COMMAND CodeChecker parse ./reports;
)
