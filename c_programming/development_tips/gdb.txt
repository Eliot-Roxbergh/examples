###### GDB ######

gdb --args my-file arg1 arg2 ...
gdb --tui my-file #split screen with source code (same as "ctrl+x a")

# GDB uses several emacs-like bindings
#   When using TUI these might be extra useful:
#     ctrl+x a - enable/disable TUI
#     ctrl+x o - change active window
#     ctrl+x 1 - TUI layout with one window  (show source)
#     ctrl+x 2 - TUI layout with two windows (show source and assembly)
#     ctrl+l - refresh/clear screen
#   It is also possible to show more things, such as register values, in the TUI windows

br my_func
br my_file.c:123
del //delete all breakpoints
clear [<location>] //delete breakpoint in current location,
                   // but if argument is supplied, delete at that line nr if possible, otherwise then try to delete that breakpoint ID instead.
                   // (e.g. `clear 2` would first try to delete breakpoint on line 2 and if not possible try to delete breakpoint number 2 instead.)
enable / disable // enable or disable one, multiple, or all breakpoints

# Example break on condition (e.g. rv is -1)
//compile with -O0 (not -Og)
start
watch rv
condition 2 rv == -1 //2 or whatever breakpoint was created line above
cont


shell [<cmd>]

run // start and run program
start //start but don't run directly
continue

s // (step) or use "n" (next) to avoid stepping into function
fin //finish, return from current function
p my_var //print struct data, e.g. may use p/x my_var to print in hex format or p *my_var to dereference a pointer,
display *my_struct //same as print but persistent (shows every time it changes!)
bt //same as "where"
list //show code around current line
q //quit

info //a lot can be printed with info
info registers
info args //arguments to current function
info locals //current local variables

### Debugging Linux Programs ###

## Get debug symbols ##
# Debian 11 / Ubuntu 22 or newer, get debug symbols with Debuginfod [1].
# Set path to symbols used in your distro, e.g. by setting,
export DEBUGINFOD_URLS="https://debuginfod.debian.net"
# or, export DEBUGINFOD_URLS="https://debuginfod.ubuntu.com"

## Get source ##
#   (package is probably patched for debian/ubuntu so use the same src as in apt)
# These steps might not be completely "correct" (TODO) but this worked for me

# Use sources from apt to get correct version & applied patches
# Note --> also enable deb-src in /etc/apt/sources.list
cd /tmp/
apt source PACKAGE
sudo mv PACKAGE.X.Y/ /usr/lib/debug/

## GDB ##
# Start gdb with the src directory from above (-d or 'directory' in GDB)
# If not found, see which relative path the program uses and update directory accordingly (this is a bit of a pain in the ass so probably there's a standard location for this?)
gdb  -d /usr/lib/debug/PACKAGE.X.Y PROGRAM-NAME


[1] - https://ubuntu.com/server/docs/service-debuginfod, https://wiki.debian.org/Debuginfod
