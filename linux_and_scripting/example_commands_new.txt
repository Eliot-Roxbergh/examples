# Copyright 2022 Eliot Roxbergh. All rights reserved.

###### Terminal settings / general ######

#   See also https://www.shell-tips.com/bash/environment-variables/ and https://www.shell-tips.com/bash/shortcuts/

#show bindings for your terminal (i.e. readline bindings)
# (default Bash shortcuts are based on Emac shortcuts)
bind -p
#also
stty -a

############################################################
# Basic, default, Bash bindings to enjoy (emacs)
#   More here: https://skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/
############################################################
#Move one word back:    alt+b  (ctrl+b = move one character instead)
#Move one word forward: alt+f  (ctrl+f = move one character instead)
#Start of line: <HOME> or ctrl+a
#End of line:   <END>  or ctrl+e
#Go to start of line and then back again: ctrl+xx (works only once per line?)
############################################################
#Delete previous word: ctrl+w (alt+backspace for the same but stop early at other symbols such as -)
#Delete all to left: ctrl+u
#Delete all to right: ctrl+k
#Delete whole line: ctrl+?
#Undo (paste): ctrl+y
############################################################
#Backward search: ctrl+r
#Forward search:  ctrl+s #can change direction after using ctrl+r, enable with stty -ixon
#Last argument (word) from previous command: alt+. (repeat to go back further)
############################################################


#In Bash and other programs (e.g. Git)
# use -- to show that this is the end of commands and next is only user input
# For instance, `cat -- -v` will show the file called "-v" instead of the command -v


###### UNIX stuff ######

#   (see manpage for powerful options to these commands)
basename #/a/b/bin.c -> bin.c
dirname  #/a/b/bin.c -> /a/b

# "For each NAME, indicate how it would be interpreted if used as a command name "
# e.g. type vim -> vim is /usr/bin/vim,
#   or type ls -> ls is aliased to `ls --color=auto'
type <command> //see `type --help`


###### Git ######

#default order is chronological which might get weird if branches have been merged
#   use topo-order to see a more reasonable logical order
git log --topo-order
git log --stat #see files changed

git push origin --delete <branch>


###### More ######

grep -Hn <my_pattern> <files> #print filenames and line numbers

#extract archive to a folder based on archive name, here "MY_STUFF/"
tar xvf MY_STUFF.tar.gz --one-top-level

#see stats for a program, quite many uses
time
